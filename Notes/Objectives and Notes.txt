Twitter.__send__                    Twitter.acts_like?                  Twitter.alias_attribute           
Twitter.alias_method_chain          Twitter.ancestors                   Twitter.anonymous?                
Twitter.as_json                     Twitter.autoload                    Twitter.autoload?                 
Twitter.bearer_token=               Twitter.bearer_token?               Twitter.blank?                    
Twitter.capture                     Twitter.class                       Twitter.class_eval                
Twitter.class_exec                  Twitter.class_variable_defined?     Twitter.class_variable_get        
Twitter.class_variable_set          Twitter.class_variables             Twitter.client                    
Twitter.client?                     Twitter.clone                       Twitter.configure                 
Twitter.connection_options          Twitter.connection_options=         Twitter.const_defined?            
Twitter.const_get                   Twitter.const_missing               Twitter.const_set                 
Twitter.constants                   Twitter.consumer_key                Twitter.consumer_key=             
Twitter.consumer_secret=            Twitter.credentials?                Twitter.define_singleton_method   
Twitter.delegate                    Twitter.deprecate                   Twitter.display                   
Twitter.dup                         Twitter.duplicable?                 Twitter.enable_warnings           
Twitter.endpoint                    Twitter.endpoint=                   Twitter.enum_for                  
Twitter.eql?                        Twitter.equal?                      Twitter.extend                    
Twitter.freeze                      Twitter.frozen?                     Twitter.gem                       
Twitter.hash                        Twitter.identity_map                Twitter.identity_map=             
Twitter.in?                         Twitter.include?                    Twitter.included_modules          
Twitter.initialize_clone            Twitter.initialize_dup              Twitter.inspect                   
Twitter.instance_eval               Twitter.instance_exec               Twitter.instance_method           
Twitter.instance_methods            Twitter.instance_of?                Twitter.instance_values           
Twitter.instance_variable_defined?  Twitter.instance_variable_get       Twitter.instance_variable_names   
Twitter.instance_variable_set       Twitter.instance_variables          Twitter.is_a?                     
Twitter.kind_of?                    Twitter.load                        Twitter.load_dependency           
Twitter.local_constant_names        Twitter.local_constants             Twitter.mattr_accessor            
Twitter.mattr_reader                Twitter.mattr_writer                Twitter.method                    
Twitter.method_defined?             Twitter.methods                     Twitter.middleware                
Twitter.middleware=                 Twitter.module_eval                 Twitter.module_exec               
Twitter.name                        Twitter.nil?                        Twitter.oauth_token=              
Twitter.oauth_token_secret=         Twitter.object_id                   Twitter.parent                    
Twitter.parent_name                 Twitter.parents                     Twitter.presence                  
Twitter.present?                    Twitter.private_class_method        Twitter.private_constant          
Twitter.private_instance_methods    Twitter.private_method_defined?     Twitter.private_methods           
Twitter.protected_instance_methods  Twitter.protected_method_defined?   Twitter.protected_methods         
Twitter.psych_to_yaml               Twitter.psych_yaml_as               Twitter.public_class_method       
Twitter.public_constant             Twitter.public_instance_method      Twitter.public_instance_methods   
Twitter.public_method               Twitter.public_method_defined?      Twitter.public_methods            
Twitter.public_send                 Twitter.qualified_const_defined?    Twitter.qualified_const_get       
Twitter.qualified_const_set         Twitter.quietly                     Twitter.redefine_method           
Twitter.remove_class_variable       Twitter.remove_possible_method      Twitter.require                   
Twitter.require_association         Twitter.require_dependency          Twitter.require_or_load           
Twitter.reset!                      Twitter.respond_to?                 Twitter.respond_to_missing?       
Twitter.send                        Twitter.setup                       Twitter.silence                   
Twitter.silence_stderr              Twitter.silence_stream              Twitter.silence_warnings          
Twitter.singleton_class             Twitter.singleton_methods           Twitter.suppress                  
Twitter.taint                       Twitter.tainted?                    Twitter.tap                       
Twitter.to_enum                     Twitter.to_json                     Twitter.to_s                      
Twitter.to_yaml                     Twitter.to_yaml_properties          Twitter.trust                     
Twitter.try                         Twitter.unloadable                  Twitter.untaint                   
Twitter.untrust                     Twitter.untrusted?                  Twitter.user_token?               
Twitter.with_warnings               Twitter.yaml_as                   




We're going to build a simple application that fetches the most recent tweets from a given Twitter username.

There should be two types of URLs: the index page with a URL field to enter a Twitter username and a URL to display the most recent tweets of a particular username.

That is,

http://localhost:9393/jfarmer
should display the most recent tweets from https://twitter.com/jfarmer.

The goal of this challenge is to become familiar with working with third-party APIs and the kind of architecture decisions necessary to support that. We'll add support for more API endpoints later.

Objectives
Your First Twitter Application
Add the Twitter gem to your Gemfile and run

bundle install
to install the Gem. Read the Configuration section on the Twitter gem's GitHub page.

You'll have to register a Twitter application on Twitter and get an API key and API secret. You can do this at https://dev.twitter.com/apps/new.

This will also be your first OAuth-based application. OAuth is a standardized authentication protocol that allows a web application to delegate authentication to a third-party, e.g., "Log in via Twitter," "Log in via Facebook," "Log in via Google," etc.

We don't be supporting "Log in via Twitter" yet, so when you go to create a Twitter application the only fields that matter are the application name (which must be unique across all Twitter applications) and application description. The application URL can be anything and the callback URL can be blank.

Note: You'll need a callback URL in a world where you want to support "Log in via Twitter."

After creating your application you'll be redirected to your application configuration page. The URL should look like

https://dev.twitter.com/apps/<#application ID>/show
At the bottom of the page you'll see a section called Your access token, which looks roughly like this: http://cl.ly/image/340S2F2t0V3Q. Create an access token for yourself.

You now have all the information you need to build a Twitter client. Follow the directions in the configuration section of the Twitter gem.

Here's a simple test of whether you understand how the Twitter gem and API work and whether your environment is set up correctly. Can you write a simple command-line Ruby program — no more than 5-10 lines — to tweet something from the command line on your Twitter account?

If you want to use rake console you'll have to require 'twitter' and configure the Twitter gem in your environment.rb file. While you can require these keys directly in your environment file, this is not a good idea if you are uploading your applications to GitHub or otherwise making this code (and your keys) public. To avoid this, you can put your keys in a yaml file and load it in your environment.rb file and then put this yaml file in your .gitignore file so you can access it locally but it will not be uploaded to GitHub. See this post

Recent Tweets (not cached)
Create a routes that looks like this:

get '/' do
end

get '/:username' do
end
Make /:username display the 10 most recent tweets of the supplied Twitter username. Edit environment.rb to add the appropriate configuration.

Don't worry about leaking your development credentials into the public for now.

Recent Tweets (cached)
The above URL will be pretty slow. Every time you access it you have to make an API request, which could take a second or more. Let's create a local cache of the results so it's only slow the first time we get a list of recent tweets.

Create models Tweet and TwitterUser. Implement something like the following:

get '/:username' do
  @user = TwitterUser.find_by_username(params[:username])
  if @user.tweets.empty?
    # User#fetch_tweets! should make an API call
    # and populate the tweets table
    #
    # Future requests should read from the tweets table 
    # instead of making an API call
    @user.fetch_tweets!
  end

  @tweets = @user.tweets.limit(10)
end
Your code doesn't have to literally look like the code above, although the above is a solid foundation. You will not be penalized if you write something different. This will not count towards your final grade.

Recent Tweets (cached + invalidation)
The nice thing about the cached version is that only the first request is slow. The bad thing about the cached version is that the list of tweets quickly becomes stale. If there's any data in the database we use that data, even if it's two years old.

We need to flag when the cache is stale and re-fetch the data if it's stale. Let's say for now that the cache is stale if we've fetched the recent tweets within the last 15 minutes. Change your controller code to work thus:

get '/:username' do
  @user = TwitterUser.find_by_username(params[:username])
  if @user.tweets_stale?
    # User#fetch_tweets! should make an API call
    # and populate the tweets table
    #
    # Future requests should read from the tweets table 
    # instead of making an API call
    @user.fetch_tweets!
  end

  @tweets = @user.tweets
end
The logic about what a "stale tweet" means should be in the TwitterUser model.

Fancier Invalidation
Can you think of a better way to invalidate the cached tweets? That is, decide when the data is stale and needs to be re-fetched?

A famous saying goes: "There are only two hard things in computer science: cache invalidation and naming things."

One issue is that every user shouldn't have their cache refreshed on the same schedule. Someone who tweets once a year doesn't need to have their cache refreshed every 15 minutes.

Can you modify the User#tweets_stale? method to do something fancier? Maybe look at the average time between the last N tweets and use that as the "stale" threshold on a per-user basis?

Think of a few possibilities and discuss the pros and cons with your pair. Implement one.

========== Git Ignore ===================

$ git rm -f config/twitter.yaml
$ echo 'twitter.yaml' >> .gitignore
$ git add .gitignore
$ git commit -m "ignored Twitter OAuth keys"



========== Twitter stuff ================

Organization

Information about the organization or company associated with your application. This information is optional.

Organization  None
Organization website  None
OAuth settings

Your application's OAuth settings. Keep the "Consumer secret" a secret. This key should never be human-readable in your application.

Access level   Read and write 
About the application permission model
Consumer key  xwQHmemmWu3uyAeARbIA
Consumer secret QNog1uqWBvPGZM8BGPmzALFsiYGkc9RHs8jrVuJYRTc
Request token URL https://api.twitter.com/oauth/request_token
Authorize URL https://api.twitter.com/oauth/authorize
Access token URL  https://api.twitter.com/oauth/access_token
Callback URL  None
Sign in with Twitter  No
Your access token

Use the access token string as your "oauth_token" and the access token secret as your "oauth_token_secret" to sign requests with your own Twitter account. Do not share your oauth_token_secret with anyone.

Access token  15813132-Q5Q6HY1vM9Imt0bDvUhfiF1wyoQVd6inVS0E8QoLb
Access token secret f8EGgoBp2VhxBJHVHirdCUvS1TkqbIgnGOS08fvV4xnkP
Access level  Read and write
